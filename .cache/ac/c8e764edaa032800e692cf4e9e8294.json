{"id":"s8zH","dependencies":[],"generated":{"html":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Document</title><style>body,html{height:100%}body{font:9.3vw Arial Black,Avenir-Black,Arial,sans-serif;color:#333}#stopwatch,body{display:flex;justify-content:center;align-items:center}#stopwatch{flex-flow:column;text-align:center}#stopwatch .hundredth{color:#999}button{font:3vw Arial Black,Avenir-Black,Arial,sans-serif;padding:.33em .66em .48em;border-radius:.6em;width:5.1em;outline:none}button:active{background:#999}</style></head><body> <div id=\"stopwatch\"> <div class=\"display\"> 00:00:00 <div class=\"hundredth\">00 / 100</div> </div> <div> <button class=\"start-stop-btn\">Start</button> <button class=\"reset-btn\">Reset</button> </div> </div> <script>\n        (function () {\n\n            let timeStart = null,\n                cumulativeDuration = 0,\n                startButtonMode = true,\n                stopRepeatUpdateFn;\n\n            const displayElement = document.querySelector(\"#stopwatch .display\"),\n                startStopButton = document.querySelector(\"#stopwatch .start-stop-btn\"),\n                resetButton = document.querySelector(\"#stopwatch .reset-btn\");\n\n            function pad(a) {\n                return (a >= 10) ? `${a}` : `0${a}`;\n            }\n\n            function updateDisplay() {\n                const timeElapsed = (Date.now() - timeStart) + cumulativeDuration;\n                const hour = Math.floor(timeElapsed / 1000 / 60 / 60),\n                    minute = Math.floor(timeElapsed / 1000 / 60) % 60,\n                    second = Math.floor(timeElapsed / 1000) % 60,\n                    centis = Math.floor((timeElapsed % 1000) / 10);\n                displayElement.innerHTML = `${pad(hour)}:${pad(minute)}:${pad(second)}<div class=\"hundredth\">${pad(centis)} / 100</div>`;\n            }\n\n            function repeatUpdateDisplay(fn) {\n                let continueToUpdate = true;\n\n                function updater() {\n                    if (continueToUpdate) {\n                        fn();\n                        requestAnimationFrame(updater);\n                    }\n                }\n\n                requestAnimationFrame(updater);\n\n                return function () {\n                    continueToUpdate = false;\n                }\n            }\n\n            startStopButton.addEventListener(\"click\", ev => {\n                if (startButtonMode) {\n                    timeStart = Date.now();\n                    stopRepeatUpdateFn = repeatUpdateDisplay(updateDisplay);\n                } else {\n                    updateDisplay();\n                    cumulativeDuration += (Date.now() - timeStart);\n                    stopRepeatUpdateFn && stopRepeatUpdateFn();\n                    stopRepeatUpdateFn = null;\n                }\n                startStopButton.innerHTML = startButtonMode ? \"Pause\" : \"Start\";\n                startButtonMode = !startButtonMode;\n            });\n\n            resetButton.addEventListener(\"click\", ev => {\n                stopRepeatUpdateFn && stopRepeatUpdateFn();\n                stopRepeatUpdateFn = null;\n\n                displayElement.innerHTML = '00:00:00<div class=\"hundredth\">00 / 100</div>';\n                cumulativeDuration = 0;\n                startButtonMode = true;\n                startStopButton.innerHTML = \"Start\";\n            });\n\n        }());\n        </script> </body></html>"},"sourceMaps":null,"error":null,"hash":"6278c68e65eb55e7a97799b97ea47965","cacheData":{}}